// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package person

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson(in *jlexer.Lexer, out *Twitter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "bio":
			out.Bio = string(in.String())
		case "followers":
			out.Followers = int64(in.Int64())
		case "following":
			out.Following = int64(in.Int64())
		case "statuses":
			out.Statuses = int64(in.Int64())
		case "favorites":
			out.Favorites = int64(in.Int64())
		case "location":
			out.Location = string(in.String())
		case "site":
			out.Site = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson(out *jwriter.Writer, in Twitter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Int64(int64(in.Followers))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		out.Int64(int64(in.Following))
	}
	{
		const prefix string = ",\"statuses\":"
		out.RawString(prefix)
		out.Int64(int64(in.Statuses))
	}
	{
		const prefix string = ",\"favorites\":"
		out.RawString(prefix)
		out.Int64(int64(in.Favorites))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		out.String(string(in.Site))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Twitter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Twitter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Twitter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Twitter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson1(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			(out.Name).UnmarshalEasyJSON(in)
		case "email":
			out.Email = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "geo":
			(out.Geo).UnmarshalEasyJSON(in)
		case "bio":
			out.Bio = string(in.String())
		case "site":
			out.Site = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "employment":
			(out.Employment).UnmarshalEasyJSON(in)
		case "facebook":
			(out.Facebook).UnmarshalEasyJSON(in)
		case "github":
			(out.Github).UnmarshalEasyJSON(in)
		case "twitter":
			(out.Twitter).UnmarshalEasyJSON(in)
		case "linkedin":
			(out.LinkedIn).UnmarshalEasyJSON(in)
		case "googleplus":
			(out.GooglePlus).UnmarshalEasyJSON(in)
		case "angellist":
			(out.AngelList).UnmarshalEasyJSON(in)
		case "klout":
			(out.Klout).UnmarshalEasyJSON(in)
		case "foursquare":
			(out.FourSquare).UnmarshalEasyJSON(in)
		case "aboutme":
			(out.AboutMe).UnmarshalEasyJSON(in)
		case "gravatar":
			(out.Gravatar).UnmarshalEasyJSON(in)
		case "fuzzy":
			out.Fuzzy = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson1(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		(in.Name).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"geo\":"
		out.RawString(prefix)
		(in.Geo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		out.String(string(in.Site))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		(in.Employment).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"facebook\":"
		out.RawString(prefix)
		(in.Facebook).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"github\":"
		out.RawString(prefix)
		(in.Github).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"twitter\":"
		out.RawString(prefix)
		(in.Twitter).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"linkedin\":"
		out.RawString(prefix)
		(in.LinkedIn).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"googleplus\":"
		out.RawString(prefix)
		(in.GooglePlus).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"angellist\":"
		out.RawString(prefix)
		(in.AngelList).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"klout\":"
		out.RawString(prefix)
		(in.Klout).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"foursquare\":"
		out.RawString(prefix)
		(in.FourSquare).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"aboutme\":"
		out.RawString(prefix)
		(in.AboutMe).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"gravatar\":"
		out.RawString(prefix)
		(in.Gravatar).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"fuzzy\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fuzzy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson1(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson2(in *jlexer.Lexer, out *Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullName":
			out.FullName = string(in.String())
		case "givenName":
			out.GivenName = string(in.String())
		case "familyName":
			out.FamilyName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson2(out *jwriter.Writer, in Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fullName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"givenName\":"
		out.RawString(prefix)
		out.String(string(in.GivenName))
	}
	{
		const prefix string = ",\"familyName\":"
		out.RawString(prefix)
		out.String(string(in.FamilyName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Name) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Name) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Name) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Name) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson2(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson3(in *jlexer.Lexer, out *LinkedIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson3(out *jwriter.Writer, in LinkedIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkedIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkedIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkedIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkedIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson3(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson4(in *jlexer.Lexer, out *Klout) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		case "score":
			out.Score = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson4(out *jwriter.Writer, in Klout) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int64(int64(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Klout) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Klout) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Klout) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Klout) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson4(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson5(in *jlexer.Lexer, out *GravatarAvatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson5(out *jwriter.Writer, in GravatarAvatar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GravatarAvatar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GravatarAvatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GravatarAvatar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GravatarAvatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson5(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson6(in *jlexer.Lexer, out *Gravatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]string, 0, 4)
					} else {
						out.Urls = []string{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Urls = append(out.Urls, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "avatar":
			out.Avatar = string(in.String())
		case "avatars":
			if in.IsNull() {
				in.Skip()
				out.Avatars = nil
			} else {
				in.Delim('[')
				if out.Avatars == nil {
					if !in.IsDelim(']') {
						out.Avatars = make([]GravatarAvatar, 0, 2)
					} else {
						out.Avatars = []GravatarAvatar{}
					}
				} else {
					out.Avatars = (out.Avatars)[:0]
				}
				for !in.IsDelim(']') {
					var v2 GravatarAvatar
					(v2).UnmarshalEasyJSON(in)
					out.Avatars = append(out.Avatars, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson6(out *jwriter.Writer, in Gravatar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Urls {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"avatars\":"
		out.RawString(prefix)
		if in.Avatars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Avatars {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gravatar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gravatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gravatar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gravatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson6(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson7(in *jlexer.Lexer, out *GooglePlus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson7(out *jwriter.Writer, in GooglePlus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GooglePlus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GooglePlus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GooglePlus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GooglePlus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson7(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson8(in *jlexer.Lexer, out *Github) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "avatar":
			out.Avatar = string(in.String())
		case "company":
			out.Company = string(in.String())
		case "blog":
			out.Blog = string(in.String())
		case "followers":
			out.Followers = int64(in.Int64())
		case "following":
			out.Following = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson8(out *jwriter.Writer, in Github) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"company\":"
		out.RawString(prefix)
		out.String(string(in.Company))
	}
	{
		const prefix string = ",\"blog\":"
		out.RawString(prefix)
		out.String(string(in.Blog))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Int64(int64(in.Followers))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		out.Int64(int64(in.Following))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Github) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Github) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Github) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Github) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson8(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson9(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			out.City = string(in.String())
		case "state":
			out.State = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "lat":
			out.Lat = float64(in.Float64())
		case "lng":
			out.Lng = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson9(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix[1:])
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"lng\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lng))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Geo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Geo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Geo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Geo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson9(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson10(in *jlexer.Lexer, out *FourSquare) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson10(out *jwriter.Writer, in FourSquare) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FourSquare) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FourSquare) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FourSquare) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FourSquare) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson10(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson11(in *jlexer.Lexer, out *Facebook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson11(out *jwriter.Writer, in Facebook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Facebook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Facebook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Facebook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Facebook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson11(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson12(in *jlexer.Lexer, out *Employment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson12(out *jwriter.Writer, in Employment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Employment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Employment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Employment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Employment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson12(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson13(in *jlexer.Lexer, out *AngelList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "bio":
			out.Bio = string(in.String())
		case "blog":
			out.Blog = string(in.String())
		case "site":
			out.Site = string(in.String())
		case "followers":
			out.Followers = int64(in.Int64())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson13(out *jwriter.Writer, in AngelList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"blog\":"
		out.RawString(prefix)
		out.String(string(in.Blog))
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		out.String(string(in.Site))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Int64(int64(in.Followers))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AngelList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AngelList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AngelList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AngelList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson13(l, v)
}
func easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson14(in *jlexer.Lexer, out *AboutMe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "handle":
			out.Handle = string(in.String())
		case "bio":
			out.Bio = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson14(out *jwriter.Writer, in AboutMe) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"handle\":"
		out.RawString(prefix[1:])
		out.String(string(in.Handle))
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		out.String(string(in.Bio))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AboutMe) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AboutMe) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb0593a3EncodeGithubComAminMirJsonperfoptPerson14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AboutMe) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AboutMe) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb0593a3DecodeGithubComAminMirJsonperfoptPerson14(l, v)
}
